# DO NOT EDIT THIS FILE MANUALLY  
# This module is automatically generated by running mix task generate_file
# every change must be done inside the mix task directly

defmodule KlifeProtocol.Messages.DescribeCluster do
  @moduledoc """
  Kafka protocol DescribeCluster message

  Request versions summary:   

  Response versions summary:

  """

  alias KlifeProtocol.Deserializer
  alias KlifeProtocol.Serializer
  alias KlifeProtocol.Header

  @api_key 60
  @min_flexible_version_req 0
  @min_flexible_version_res 0

  @doc """
  Valid fields:

  - include_cluster_authorized_operations: Whether to include cluster authorized operations. (bool | versions 0+)

  """
  def serialize_request(%{headers: headers, content: content}, version) do
    headers
    |> Map.put(:request_api_key, @api_key)
    |> Map.put(:request_api_version, version)
    |> Header.serialize_request(req_header_version(version))
    |> then(&Serializer.execute(content, request_schema(version), &1))
  end

  @doc """
  Valid fields:

  - throttle_time_ms: The duration in milliseconds for which the request was throttled due to a quota violation, or zero if the request did not violate any quota. (int32 | versions 0+)
  - error_code: The top-level error code, or 0 if there was no error (int16 | versions 0+)
  - error_message: The top-level error message, or null if there was no error. (string | versions 0+)
  - cluster_id: The cluster ID that responding broker belongs to. (string | versions 0+)
  - controller_id: The ID of the controller broker. (int32 | versions 0+)
  - brokers: Each broker in the response. ([]DescribeClusterBroker | versions 0+)
      - broker_id: The broker ID. (int32 | versions 0+)
      - host: The broker hostname. (string | versions 0+)
      - port: The broker port. (int32 | versions 0+)
      - rack: The rack of the broker, or null if it has not been assigned to a rack. (string | versions 0+)
  - cluster_authorized_operations: 32-bit bitfield to represent authorized operations for this cluster. (int32 | versions 0+)

  """
  def deserialize_response(data, version) do
    {headers, rest_data} = Header.deserialize_response(data, res_header_version(version))
    {content, <<>>} = Deserializer.execute(rest_data, response_schema(version))

    %{headers: headers, content: content}
  end

  defp req_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_req, do: 2, else: 1)

  defp res_header_version(msg_version),
    do: if(msg_version >= @min_flexible_version_res, do: 1, else: 0)

  defp request_schema(0),
    do: [
      include_cluster_authorized_operations: {:boolean, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, []}
    ]

  defp response_schema(0),
    do: [
      throttle_time_ms: {:int32, %{is_nullable?: false}},
      error_code: {:int16, %{is_nullable?: false}},
      error_message: {:compact_string, %{is_nullable?: true}},
      cluster_id: {:compact_string, %{is_nullable?: false}},
      controller_id: {:int32, %{is_nullable?: false}},
      brokers:
        {{:compact_array,
          [
            broker_id: {:int32, %{is_nullable?: false}},
            host: {:compact_string, %{is_nullable?: false}},
            port: {:int32, %{is_nullable?: false}},
            rack: {:compact_string, %{is_nullable?: true}},
            tag_buffer: {:tag_buffer, %{}}
          ]}, %{is_nullable?: false}},
      cluster_authorized_operations: {:int32, %{is_nullable?: false}},
      tag_buffer: {:tag_buffer, %{}}
    ]
end